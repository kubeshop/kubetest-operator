name: GoReleaser tag build
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  ALPINE_IMAGE: alpine:3.18.0

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Go Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Release
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release -f goreleaser/.goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
          DOCKER_BUILDX_BUILDER: "${{ steps.buildx.outputs.name }}"
          DOCKER_BUILDX_CACHE_FROM: "type=gha"
          DOCKER_BUILDX_CACHE_TO: "type=gha,mode=max"
          ALPINE_IMAGE: ${{ env.ALPINE_IMAGE }}

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: false

      - name: Editing helm-release repo with version based on a Tag pushed.
        run: |

          # Setting up Git:
          git clone https://kubeshop-bot:$GH_TOKEN@github.com/kubeshop/helm-charts
          cd ./helm-charts
          git config user.name "kubeshop-bot"
          git config user.email "kubeshop-bot@kubeshop.io"

          export GH_TOKEN
          export RELEASE_VERSION

          # Check if release branch exists in helm-charts repository
          REPO_OWNER=kubeshop
          REPO_NAME=helm-charts
          RELEASE_BRANCH_NAME=release/$SERVICE/$RELEASE_VERSION
          echo $RELEASE_VERSION
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' -H "${AUTH_HEADER}" "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/branches/${RELEASE_BRANCH_NAME}")

          if [ "${STATUS}" -eq 404 ]; then
            git fetch origin main
            git checkout main
            cd ./scripts
            ./chart_releaser.sh --helm-chart-folder testkube-$SERVICE
          else
            git fetch origin "release/$SERVICE/$RELEASE_VERSION"
            git checkout "release/$SERVICE/$RELEASE_VERSION"
            echo "Switched to release branch"
            cd ./scripts
            ./chart_releaser.sh --helm-chart-folder testkube-$SERVICE --branch true
          fi

        env:
          SERVICE: operator
          GH_TOKEN: ${{ secrets.CI_BOT_TOKEN }}
          RELEASE_VERSION: ${{ steps.tag.outputs.tag }}